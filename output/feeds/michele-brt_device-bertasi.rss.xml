<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Diary of a reverse-engineer - Michele "brt_device" Bertasi</title><link>/</link><description></description><lastBuildDate>Tue, 18 Aug 2015 22:12:00 -0700</lastBuildDate><item><title>Keygenning with KLEE</title><link>/blog/2015/08/18/keygenning-with-klee/</link><description>&lt;h1 id="introduction"&gt;Introduction&lt;/h1&gt;
&lt;p&gt;In the past weeks I enjoyed working on reversing a piece of software (don't ask me the name), to study how serial numbers are validated. The story the user has to follow is pretty common: download the trial, pay, get the serial number, use it in the annoying nag screen to get the fully functional version of the software.&lt;/p&gt;
&lt;p&gt;Since my purpose is to not damage the company developing the software, I will not mention the name of the software, nor I will publish the final key generator in binary form, nor its source code. My goal is instead to study a real case of serial number validation, and to highlight its weaknesses.&lt;/p&gt;
&lt;p&gt;In this post we are going to take a look at the steps I followed to reverse the serial validation process and to make a key generator using &lt;a href="http://klee.github.io/"&gt;KLEE&lt;/a&gt; symbolic virtual machine. We are not going to follow all the details on the reversing part, since you cannot reproduce them on your own. We will concentrate our thoughts on the key-generator itself: that is the most interesting part.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michele "brt_device" Bertasi</dc:creator><pubDate>Tue, 18 Aug 2015 22:12:00 -0700</pubDate><guid isPermaLink="false">tag:None,2015-08-18:/blog/2015/08/18/keygenning-with-klee/</guid><category>reverse-engineering</category><category>symbolic execution</category></item></channel></rss>