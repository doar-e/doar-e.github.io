<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Diary of a reverse-engineer - Jeremy "__x86" Fetiveau</title><link>https://doar-e.github.io/</link><description></description><lastBuildDate>Thu, 09 May 2019 08:00:00 -0700</lastBuildDate><item><title>Circumventing Chrome's hardening of typer bugs</title><link>https://doar-e.github.io%5Cblog/2019/05/09/circumventing-chromes-hardening-of-typer-bugs/</link><description>&lt;h1 id="introduction"&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Some &lt;a href="http://eternalsakura13.com/2018/11/19/justintime/"&gt;recent&lt;/a&gt; &lt;a href="https://abiondo.me/2019/01/02/exploiting-math-expm1-v8"&gt;Chrome&lt;/a&gt; &lt;a href="https://www.jaybosamiya.com/blog/2019/01/02/krautflare/"&gt;exploits&lt;/a&gt; were taking advantage of &lt;a href="https://en.wikipedia.org/wiki/Bounds-checking_elimination"&gt;Bounds-Check-Elimination&lt;/a&gt; in order to get a R/W primitive from a TurboFan's typer bug (a bug that incorrectly computes type information during code optimization). Indeed during the simplified lowering phase when visiting a CheckBounds node if the engine can guarantee that …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeremy "__x86" Fetiveau</dc:creator><pubDate>Thu, 09 May 2019 08:00:00 -0700</pubDate><guid isPermaLink="false">tag:doar-e.github.io\blog,2019-05-09:/2019/05/09/circumventing-chromes-hardening-of-typer-bugs/</guid><category>v8</category><category>turbofan</category><category>chrome</category><category>exploitation</category></item><item><title>Introduction to TurboFan</title><link>https://doar-e.github.io%5Cblog/2019/01/28/introduction-to-turbofan/</link><description>&lt;h1 id="introduction"&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Ages ago I wrote a blog post here called &lt;a href="https://doar-e.github.io/blog/2014/03/11/first-dip-into-the-kernel-pool-ms10-058/"&gt;first dip in the kernel pool&lt;/a&gt;, this year we're going to swim in a sea of nodes!&lt;/p&gt;
&lt;p&gt;The current trend is to attack JavaScript engines and more specifically, optimizing JIT compilers such as &lt;a href="https://v8.dev/"&gt;V8&lt;/a&gt;'s &lt;a href="https://v8.dev/docs/turbofan"&gt;TurboFan&lt;/a&gt;, SpiderMonkey's IonMonkey, JavaScriptCore's Data …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeremy "__x86" Fetiveau</dc:creator><pubDate>Mon, 28 Jan 2019 08:00:00 -0800</pubDate><guid isPermaLink="false">tag:doar-e.github.io\blog,2019-01-28:/2019/01/28/introduction-to-turbofan/</guid><category>v8</category><category>turbofan</category><category>exploitation</category></item><item><title>First dip into the kernel pool : MS10-058</title><link>https://doar-e.github.io%5Cblog/2014/03/11/first-dip-into-the-kernel-pool-ms10-058/</link><description>&lt;h1 id="introduction"&gt;Introduction&lt;/h1&gt;
&lt;p&gt;I am currently playing with pool-based memory corruption vulnerabilities. That’s why I wanted to program a PoC exploit for the vulnerability presented by Tarjei Mandt during his first talk “Kernel Pool Exploitation on Windows 7” &lt;a href="http://www.mista.nu/research/MANDT-kernelpool-PAPER.pdf"&gt;[3]&lt;/a&gt;. I think it's a good exercise to start learning about pool overflows …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeremy "__x86" Fetiveau</dc:creator><pubDate>Tue, 11 Mar 2014 10:52:37 +0100</pubDate><guid isPermaLink="false">tag:doar-e.github.io\blog,2014-03-11:/2014/03/11/first-dip-into-the-kernel-pool-ms10-058/</guid><category>reverse-engineering</category><category>exploitation</category><category>kernel pool</category><category>ms10-058</category><category>tcpip.sys</category></item></channel></rss>