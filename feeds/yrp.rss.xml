<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Diary of a reverse-engineer - yrp</title><link>/</link><description></description><lastBuildDate>Sat, 14 Jul 2018 18:49:00 -0700</lastBuildDate><item><title>CVE-2017-2446 or JSC::JSGlobalObject::isHavingABadTime.</title><link>/blog/2018/07/14/cve-2017-2446-or-jscjsglobalobjectishavingabadtime/</link><description>&lt;h1 id="introduction"&gt;Introduction&lt;/h1&gt;
&lt;p&gt;This post will cover the development of an exploit for JavaScriptCore (JSC) from the perspective of someone with no background in browser exploitation.&lt;/p&gt;
&lt;p&gt;Around the start of the year, I was pretty burnt out on CTF problems and was interested in writing an exploit for something more complicated and practical. I settled on writing a WebKit exploit for a few reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It is code that is broadly used in the real world&lt;/li&gt;
&lt;li&gt;Browsers seemed like a cool target in an area I had little familiarity (both C++ and interpreter exploitation.)&lt;/li&gt;
&lt;li&gt;WebKit is (supposedly) the softest of the major browser targets.&lt;/li&gt;
&lt;li&gt;There were good existing resources on WebKit exploitation, namely &lt;a href="http://phrack.org/papers/attacking_javascript_engines.html"&gt;saelo’s Phrack article&lt;/a&gt;, as well as a variety of public console exploits.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With this in mind, I got a recommendation for an interesting looking bug that has not previously been publicly exploited: &lt;a href="https://twitter.com/natashenka"&gt;@natashenka&lt;/a&gt;’s CVE-2017-2446 from the &lt;a href="https://bugs.chromium.org/p/project-zero/issues/detail?id=1032"&gt;project zero bugtracker&lt;/a&gt;. The bug report had a PoC which crashed in &lt;code&gt;memcpy()&lt;/code&gt; with some partially controlled registers, which is always a promising start.&lt;/p&gt;
&lt;p&gt;This post assumes you’ve read saelo’s Phrack article linked above, particularly the portions on NaN boxing and butterflies -- I can’t do a better job of explaining these concepts than the article. Additionally, you should be able to run a browser/JavaScript engine in a debugger -- we will target Linux for this post, but the concepts should translate to your preferred platform/debugger.&lt;/p&gt;
&lt;p&gt;Finally, the goal of doing this initially and now writing it up was and is to learn as much as possible. There is clearly a lot more for me to learn in this area, so if you read something that is incorrect, inefficient, unstable, a bad idea, or just have some thoughts to share, I’d love to hear from you.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">yrp</dc:creator><pubDate>Sat, 14 Jul 2018 18:49:00 -0700</pubDate><guid isPermaLink="false">tag:None,2018-07-14:/blog/2018/07/14/cve-2017-2446-or-jscjsglobalobjectishavingabadtime/</guid><category>JavascriptCore</category><category>jsc</category><category>cve-2017-2446</category><category>exploitation</category></item><item><title>happy unikernels</title><link>/blog/2016/12/21/happy-unikernels/</link><description>&lt;h1 id="intro"&gt;Intro&lt;/h1&gt;
&lt;p&gt;Below is a collection of notes regarding unikernels. I had originally prepared this stuff to submit to EkoParty’s CFP, but ended up not wanting to devote time to stabilizing PHP7’s heap structures and I lost interest in the rest of the project before it was complete. However, there are still some cool takeaways I figured I could write down. Maybe they’ll come in handy? If so, please let let me know.&lt;/p&gt;
&lt;p&gt;Unikernels are a continuation of turning everything into a container or VM. Basically, as many VMs currently just run one userland application, the idea is that we can simplify our entire software stack by removing the userland/kernelland barrier and essentially compiling our usermode process into the kernel. This is, in the implementation I looked at, done with a NetBSD kernel and a variety of either &lt;a href="https://github.com/rumpkernel/rumprun-packages"&gt;native or lightly-patched POSIX applications&lt;/a&gt;  (bonus: there is significant lag time between upstream fixes and rump package fixes, just like every other containerized solution).&lt;/p&gt;
&lt;p&gt;While I don’t necessarily think that conceptually unikernels are a good idea (attack surface reduction vs mitigation removal), I do think people will start more widely deploying them shortly and I was curious what memory corruption exploitation would look like inside of them, and more generally what your payload options are like.&lt;/p&gt;
&lt;p&gt;All of the following is based off of two unikernel programs, nginx and php5 and only makes use of public vulnerabilities. I am happy to provide all referenced code (in varying states of incompleteness), on request.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">yrp</dc:creator><pubDate>Wed, 21 Dec 2016 18:59:00 -0800</pubDate><guid isPermaLink="false">tag:None,2016-12-21:/blog/2016/12/21/happy-unikernels/</guid><category>unikernel</category><category>rumpkernel</category><category>exploitation</category></item></channel></rss>